summary: Verify that system boot devices are not automatically mounted

environment:
    PART_TYPE_BIOS_BOOT: 21686148-6449-6e6f-744e-656564454649
    PART_TYPE_EFI: c12a7328-f81f-11d2-ba4b-00a0c93ec93b

execute: |
    . $TESTSLIB/utilities.sh

    bios_boot_disk=""
    efi_boot_disk=""
    for d in /dev/disk/by-path/*; do
        path=$(readlink -f $d)

        # Ignore disks as we're only interested in partitions
        if udevadm info $path | grep DEVTYPE | grep -q disk ; then
            continue
        fi

        if udevadm info $path | grep ID_PART_ENTRY_SCHEME | grep -q gpt ; then
            # Try to find boot partitions on a gpt filesystem partition layout
            if udevadm info $path | grep ID_PART_ENTRY_TYPE | grep -q $PART_TYPE_BIOS_BOOT ; then
                bios_boot_disk=$path
            fi
            if udevadm info $path | grep ID_PART_ENTRY_TYPE | grep -q $PART_TYPE_EFI ; then
                efi_boot_disk=$path
            fi
        elif udevadm info $path | grep ID_PART_ENTRY_SCHEME | grep -q dos ; then
            if udevadm info $path | grep ID_PART_ENTRY_FLAGS | grep -q 0x80 ; then
                bios_boot_disk=$path
            fi
        fi
    done

    if [ -z "$bios_boot_disk" ] || [ -z "$efi_boot_disk" ]; then
        echo "ERROR: Failed to find any boot disk on the test system!"
        exit 1
    fi

    # Restart ciborium with automount feature enabled; this gives ciborium then
    # the chance to take decisions on available system devices again which it
    # wouldn't do otherwise if we keep it running (which we could as it
    # automatically detects if automount is enabled or not).
    snap set udisks2 automount.enable=true
    snap set udisks2 debug.enable=true
    systemctl restart snap.udisks2.ciborium

    wait_for_systemd_service snap.udisks2.ciborium
    sleep 2

    # If we have a BIOS boot disk ensure that it doesn't get mounted as it
    # hasn't a filesystem we can mount.
    if [ -n "$bios_boot_disk" ]; then
        str="$(basename $bios_boot_disk) will not be automounted as it is marked to be ignored"
        journalctl --no-pager -u snap.udisks2.ciborium | grep -q "$str"
        # Even if this is very unlikely ensure it didn't happen
        ! mount | grep /media | grep -q "$bios_boot_disk"
    fi

    if [ -n "$efi_boot_disk" ]; then
        str="$(basename $efi_boot_disk) will not be automounted as it is marked to be ignored"
        journalctl --no-pager -u snap.udisks2.ciborium | grep -q "$str"
        # By no means the EFI partition should be mounted inside /media!
        ! mount | grep /media | grep -q "$efi_boot_disk"
    fi
